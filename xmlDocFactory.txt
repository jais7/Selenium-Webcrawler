package xmlTest2;

import java.awt.image.BufferedImage;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.TimeUnit;

import javax.imageio.ImageIO;
import java.io.File;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import org.w3c.dom.Attr;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;

public class xmlTest2 {

	public static void main(String[] args) {
		System.setProperty("webdriver.chrome.driver", "chromedriver.exe");
		WebDriver driver = new ChromeDriver();
	    // Getting the initial page
	    driver.get("https://www.tripadvisor.com");
	    driver.manage().timeouts().implicitlyWait(100, TimeUnit.SECONDS);
	    driver.findElement(By.xpath("//*[@id=\"taplc_masthead_search_0\"]/div/span[1]"))
	    		.click();
	    //driver.findElement(By.xpath("//*[@id=\"taplc_masthead_search_0\"]/div/span[1]"))
		//.click(); //Another way
	    WebElement element = driver.findElement(By.xpath("//*[@id=\"mainSearch\"]"));
	    element.sendKeys("Fishing Texas");
	    WebElement element2 = driver.findElement(By.xpath("//*[@id=\"GEO_SCOPED_SEARCH_INPUT\"]"));
	    element2.sendKeys("Worldwide");
	    driver.manage().timeouts().implicitlyWait(300, TimeUnit.SECONDS);
	    driver.findElement(By.xpath("//*[@id=\"SEARCH_BUTTON\"]")).click();
	    
	    String title = "Title is missing"; 
	    String info = "Info is missing";
	    String tags = "Tags are missing";
	    String address = "Address is missing";
	    String hours = "Hours is missing";
	    String phone = "Phone info is missing";
	    String review = "Review is missing";

	    
	    driver.findElement(By.xpath("//*[@id=\"search_result\"]/div/div[2]/div[1]/div[1]/div[1]")).click();//first result
	    //driver.findElement(By.xpath("//*[@id=\"search_result\"]/div/div[2]/div[1]/div[1]")).click();//Second result page where there is a bug (FIXED)

	    
	    ArrayList<String> tabs = new ArrayList<String> (driver.getWindowHandles());
	    driver.switchTo().window(tabs.get(1)); //Switching to the next tab.
	    
	    driver.manage().timeouts().implicitlyWait(1000, TimeUnit.MILLISECONDS); //If else won't work without implicit wait.

	    if(!driver.findElements(By.cssSelector("#HEADING")).isEmpty()) {
		    title = driver.findElement(By.cssSelector("#HEADING")).getText();
	    }
	    else {
	    	 System.out.println("Title is missing");
	    }
	    if(!driver.findElements(By.xpath("/html/body/div[4]/div[6]/div/div/div[2]/div/div[1]/div/div[2]/div[2]/div[1]/div[1]/div/div[1]")).isEmpty()) {
	    	info = driver.findElement(By.xpath("/html/body/div[4]/div[6]/div/div/div[2]/div/div[1]/div/div[2]/div[2]/div[1]/div[1]/div/div[1]")).getText();
	    }else { //have to use xpath. Css selector path is not working.
	    	 System.out.println("Info is missing");
	    }
	    if(!driver.findElements(By.cssSelector(".detail")).isEmpty()) {
	    	tags = driver.findElement(By.cssSelector(".detail")).getText();
	    }else {
	    	 System.out.println("Tags are missing");
	    }
	    if(!driver.findElements(By.cssSelector("div.detail_section:nth-child(2)")).isEmpty()) {
	    	address = driver.findElement(By.cssSelector("div.detail_section:nth-child(2)")).getText();
	    }else {
	    	 System.out.println("Address is missing");
	    }
	    if(!driver.findElements(By.cssSelector("div.detail_section:nth-child(1) > div:nth-child(2)")).isEmpty()) {
	    	hours = driver.findElement(By.cssSelector("div.detail_section:nth-child(1) > div:nth-child(2)")).getText();
	    }else {
	    	System.out.println("Hours of operation missing");
	    }
	    if(!driver.findElements(By.cssSelector("div.blEntry:nth-child(2) > span:nth-child(2)")).isEmpty()) {
	    	phone = driver.findElement(By.cssSelector("div.blEntry:nth-child(2) > span:nth-child(2)")).getText();
	    }else {
	    	System.out.println("Phone info is missing");
	    }
	    if(!driver.findElements(By.cssSelector(".highlightContainer > div:nth-child(2)")).isEmpty()) {
	    	review = driver.findElement(By.cssSelector(".highlightContainer > div:nth-child(2)")).getText();
	    }else {
	    	System.out.println("Review is missing");
	    }

	    System.out.println(title);
	    System.out.println(info + "\n");
	    System.out.println(tags + "\n");
	    System.out.println(address + "\n");
		System.out.println(hours + "\n");
	    System.out.println(phone + "\n");
	  	System.out.println(review + "\n");

	    //Use XML doc to reduce memory issues.
	    try {
	    	DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
			DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
	    	
			// root elements
			Document doc = docBuilder.newDocument();

			// service provider element
			Element serviceProvider = doc.createElement("ServiceProvider");
			doc.appendChild(serviceProvider);

			// shorten way
			// A way to create elements inside the <tags>
			Attr attr = doc.createAttribute("ServiceProviderName");
			attr.setValue(title);
			serviceProvider.setAttributeNode(attr);

			// service provider title
			Element serviceProviderTitle = doc.createElement("title");
			serviceProviderTitle.appendChild(doc.createTextNode(title));
			serviceProvider.appendChild(serviceProviderTitle);

			// Service provider summary info
			Element serviceProviderInfo = doc.createElement("info");
			serviceProviderInfo.appendChild(doc.createTextNode(info));
			serviceProvider.appendChild(serviceProviderInfo);

			// Service provider tags
			Element serviceProviderTag = doc.createElement("tags");
			serviceProviderTag.appendChild(doc.createTextNode(tags));
			serviceProvider.appendChild(serviceProviderTag);

			// Service provider address
			Element serviceProviderAddress = doc.createElement("address");
			serviceProviderAddress.appendChild(doc.createTextNode(address));
			serviceProvider.appendChild(serviceProviderAddress);
			
			// Service provider hours
			Element serviceProviderHours = doc.createElement("hours");
			serviceProviderHours.appendChild(doc.createTextNode(hours));
			serviceProvider.appendChild(serviceProviderHours);
			
			// Service provider hours
			Element serviceProviderPhone = doc.createElement("phone");
			serviceProviderPhone.appendChild(doc.createTextNode(phone));
			serviceProvider.appendChild(serviceProviderPhone);
			
			// salary elements
			Element serviceProviderReview = doc.createElement("review");
			serviceProviderReview.appendChild(doc.createTextNode(review));
			serviceProvider.appendChild(serviceProviderReview);

			// salary elements
			Element serviceProviderImg = doc.createElement("imgurl");
		    driver.findElement(By.xpath("//*[@id=\"taplc_location_detail_above_the_fold_attractions_0\"]/div/div[4]/div[1]/div/div/div[1]/div/div/div[1]")).click();
		    
		    driver.navigate().refresh(); // WebDriver can't find the element without the refresh
		    driver.manage().timeouts().implicitlyWait(1000, TimeUnit.MILLISECONDS); //If else won't work without implicit wait.

		    List <WebElement> listofItems = driver.findElements(By.cssSelector("div.heroThumbnails:nth-child(4) > div:nth-child(2) > div:nth-child(n)"));
		    URL imageURL = null;
	        int countF = 0;
			for(WebElement myElement : listofItems) {
		    	String j = myElement.getAttribute("data-bigurl");
		    	System.out.println(j);
				serviceProviderImg.appendChild(doc.createTextNode(j + "\n"));
				serviceProvider.appendChild(serviceProviderImg);
		    	try {
				        //generate url
				        imageURL = new URL(j);

				        //read url and retrieve image
				        BufferedImage saveImage = ImageIO.read(imageURL);
				        //Check to see what type of image it is.
				        //download image to the workspace where the project is, save picture as picture.png (can be changed)
				        countF++;
				        ImageIO.write(saveImage, "jpg", new File(title + countF + ".jpg"));
				    } catch (IOException e) {
				        e.printStackTrace();
				    }
			}
			
			// write the content into xml file
			TransformerFactory transformerFactory = TransformerFactory.newInstance();
			Transformer transformer = transformerFactory.newTransformer();
			transformer.setOutputProperty(OutputKeys.ENCODING, "UTF-8");
			transformer.setOutputProperty(OutputKeys.INDENT, "yes");//Creates new lines between characters.
			DOMSource source = new DOMSource(doc);
			StreamResult result = new StreamResult(new File("C:\\Users\\jjohn\\Documents\\New folder\\" + title + ".xml"));

			// Output to console for testing
			// Need to comment this out to create the file.
			//result = new StreamResult(System.out);

			transformer.transform(source, result);

			System.out.println("File saved!");
			
		  } catch (ParserConfigurationException pce) {
				pce.printStackTrace();
			  } catch (TransformerException tfe) {
				tfe.printStackTrace();
			  }
	    }
}


